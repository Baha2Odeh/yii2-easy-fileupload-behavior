<?php
namespace Baha2Odeh\EasyFileUpload;

use yii\base\Behavior;
use yii\base\ErrorException;
use yii\db\ActiveRecord;
use yii\web\UploadedFile;

class EasyFileUploadBehavior extends Behavior
{
    /**
     * Stores a list of Relations configured in the Behavior in the Model.
     * Configurable property.
     *
     * Example 1:
     * ```
     * 'relations' => [
     *     'images_files' => 'image',
     * ]
     * ```
     * @var array
     */
    public $relations = [];

    /**
     *
     * Example 1:
     * ```
     *  function($relationName,UploadedFile $uploadedFile) : ActiveRecord
     * ```
     * @var callable PHP callback, which should be triggered in case of successful subscribed.
     */
    public $uploadCallBack;

    private $dynamicFieldsOfModel = [];

    public function init()
    {

        if (!is_callable($this->uploadCallBack)) {
            throw new \Exception("upload callback cant be empty");
        }
        foreach ($this->relations as $name => $relation) {
            $this->dynamicFieldsOfModel[$name] = null;
        }
    }

    /**
     * Events list.
     *
     * @return array
     */
    public function events()
    {
        return [
            ActiveRecord::EVENT_BEFORE_VALIDATE => 'loadFiles',
            ActiveRecord::EVENT_AFTER_INSERT => 'linkFiles',
            ActiveRecord::EVENT_AFTER_UPDATE => 'linkFiles',
        ];
    }

    public function loadFiles()
    {
        /** @var ActiveRecord $primaryModel */
        $primaryModel = $this->owner;
        foreach ($this->dynamicFieldsOfModel as $name => $value) {
            $relationName = $this->relations[$name];
            if ($primaryModel->getRelation($relationName)->multiple) {
                $this->dynamicFieldsOfModel[$name] = UploadedFile::getInstances($primaryModel, $name);
            } else {
                $this->dynamicFieldsOfModel[$name] = UploadedFile::getInstance($primaryModel, $name);
            }
        }
    }

    public function linkFiles()
    {
        /** @var ActiveRecord $primaryModel */
        $primaryModel = $this->owner;
        foreach ($this->dynamicFieldsOfModel as $name => $value) {
            $relationName = $this->relations[$name];
            if (!empty($this->dynamicFieldsOfModel[$name])) {
                if ($primaryModel->getRelation($relationName)->multiple) {
                    foreach ($this->dynamicFieldsOfModel[$name] as $file) {
                        $imageModel = call_user_func($this->uploadCallBack, $relationName, $file);
                        if(!empty($imageModel)) {
                            $primaryModel->link($relationName, $imageModel);
                        }
                    }
                    $this->dynamicFieldsOfModel[$name] = null;
                }else{
                    $imageModel = call_user_func($this->uploadCallBack, $relationName, $this->dynamicFieldsOfModel[$name]);
                    $this->dynamicFieldsOfModel[$name] = null;
                    if(!empty($imageModel)){
                        $primaryModel->link($relationName, $imageModel);
                    }
                }
            }
        }
    }


    /**
     * Get parameters of a field.
     *
     * @param string $fieldName
     *
     * @throws ErrorException
     *
     * @return mixed
     */
    public function getFieldParams($fieldName)
    {
        if (false === array_key_exists($fieldName, $this->dynamicFieldsOfModel)) {
            throw new ErrorException('Parameter "' . $fieldName . '" does not exist');
        }
        return $this->dynamicFieldsOfModel[$fieldName];
    }

    /**
     * {@inheritdoc}
     */
    public function canGetProperty($name, $checkVars = true)
    {
        return array_key_exists($name, $this->dynamicFieldsOfModel)
            ? true
            : parent::canGetProperty($name, $checkVars);
    }

    /**
     * {@inheritdoc}
     */
    public function canSetProperty($name, $checkVars = true)
    {
        return array_key_exists($name, $this->dynamicFieldsOfModel)
            ? true
            : parent::canSetProperty($name, $checkVars = true);
    }

    public function __get($name)
    {
        if (array_key_exists($name, $this->dynamicFieldsOfModel)) {
            return $this->dynamicFieldsOfModel[$name];
        }
        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->dynamicFieldsOfModel)) {
            return $this->dynamicFieldsOfModel[$name] = $value;
        }
        parent::__set($name, $value); // TODO: Change the autogenerated stub
    }


}